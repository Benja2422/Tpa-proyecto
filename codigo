import tkinter as tk
from tkinter import messagebox
import json
import os


class Login(tk.Tk):

    def __init__(self):
        super().__init__()
        self.title("Inicio de sesión unificado")
        self.usuarios = self.cargar_usuarios()
        self.centrar_ventana(360, 250)
        self.mostrar_login_unico()

    def centrar_ventana(self, ancho, alto):
        ancho_pantalla = self.winfo_screenwidth()
        alto_pantalla = self.winfo_screenheight()
        x = (ancho_pantalla - ancho) // 2
        y = (alto_pantalla - alto) // 2
        self.geometry(f"{ancho}x{alto}+{x}+{y}")

    def cargar_usuarios(self):
        if os.path.exists("usuarios.json"):
            with open("usuarios.json", "r", encoding="utf-8") as archivo:
                try:
                    data = json.load(archivo)
                    return data  # Lista de diccionarios
                except json.JSONDecodeError:
                    messagebox.showerror("Error", "El archivo JSON no tiene un formato válido.")
        return []

    def mostrar_login_unico(self):
        tk.Label(self, text="Usuario:").grid(row=0, column=0, padx=10, pady=10, sticky="e")
        self.entry_usuario = tk.Entry(self)
        self.entry_usuario.grid(row=0, column=1, padx=10, pady=10)

        tk.Label(self, text="Contraseña:").grid(row=1, column=0, padx=10, pady=10, sticky="e")
        self.entry_contraseña = tk.Entry(self, show="*")
        self.entry_contraseña.grid(row=1, column=1, padx=10, pady=10)

        tk.Label(self, text="Rol:").grid(row=2, column=0, padx=10, pady=10, sticky="e")
        self.rol_var = tk.StringVar(value="admin")
        opciones = ["admin", "vendedor"]
        
        self.rol_menu = tk.OptionMenu(self, self.rol_var, *opciones)
        self.rol_menu.grid(row=2, column=1, padx=10, pady=10)

        self.boton_login = tk.Button(self, text="Iniciar sesión", command=self.verificar_credenciales)
        self.boton_login.grid(row=3, column=0, columnspan=2, pady=20)

    def verificar_credenciales(self):
        usuario_ingresado = self.entry_usuario.get()
        contraseña_ingresada = self.entry_contraseña.get()
        rol_seleccionado = self.rol_var.get()

        for user in self.usuarios:
            if (
                user.get("usuario") == usuario_ingresado and
                user.get("contraseña") == contraseña_ingresada and
                user.get("rol") == rol_seleccionado
            ):
                messagebox.showinfo("Éxito", f"Inicio de sesión exitoso como {rol_seleccionado}.")
                self.withdraw()  # Oculta la ventana de login

                if rol_seleccionado == "admin":
                    VentanaAdmin().mainloop()
                else:
                    messagebox.showinfo("Vendedor", "Aquí iría la ventana del vendedor (por agregar)")





class VentanaAdmin(tk.Toplevel):
    def __init__(self):
        super().__init__()
        self.title("Panel Administrador")
        self.geometry("400x400")
        self.productos = self.cargar_productos()

        self.lista = tk.Listbox(self, width=50)
        self.lista.pack(pady=10)
        self.actualizar_lista()

        self.entry_nombre = tk.Entry(self)
        self.entry_nombre.insert(0, "Nombre del producto")
        self.entry_nombre.pack(pady=5)

        self.entry_precio = tk.Entry(self)
        self.entry_precio.insert(0, "Precio")
        self.entry_precio.pack(pady=5)

        tk.Button(self, text="Agregar producto", command=self.agregar_producto).pack(pady=5)
        tk.Button(self, text="Eliminar seleccionado", command=self.eliminar_producto).pack(pady=5)

    def cargar_productos(self):
        if os.path.exists("productos.json"):
            with open("productos.json", "r", encoding="utf-8") as f:
                try:
                    return json.load(f)
                except json.JSONDecodeError:
                    return []
        return []

    def guardar_productos(self):
        with open("productos.json", "w", encoding="utf-8") as f:
            json.dump(self.productos, f, indent=4)

    def actualizar_lista(self):
        self.lista.delete(0, tk.END)
        for producto in self.productos:
            self.lista.insert(tk.END, f"[{producto['codigo']}] {producto['nombre']} - ${producto['precio']}")


    def agregar_producto(self):
        nombre = self.entry_nombre.get()
        try:
            precio = self.entry_precio.get()
            # Asignar código único incremental
            if self.productos:
                ultimo_codigo = max(p["codigo"] for p in self.productos)
                nuevo_codigo = ultimo_codigo + 1
            else:
                nuevo_codigo = 1

            nuevo_producto = {
                "codigo": nuevo_codigo,
                "nombre": nombre,
                "precio": precio
            }

            self.productos.append(nuevo_producto)
            self.guardar_productos()
            self.actualizar_lista()
            self.entry_nombre.delete(0, tk.END)
            self.entry_precio.delete(0, tk.END)
        except ValueError:
            messagebox.showerror("Error", "El precio debe ser un número.")


    def eliminar_producto(self):
        seleccion = self.lista.curselection()
        if seleccion:
            index = seleccion[0]
            del self.productos[index]
            self.guardar_productos()
            self.actualizar_lista()

class VentanaVendedor(tk.Toplevel):
    def __init__(self):
        super().__init__()
        self.title("Panel Vendedor")
        self.geometry("400x400")
        # Aquí puedes agregar funcionalidades específicas para el vendedor
if __name__ == "__main__":
    app = Login()
    app.mainloop()
